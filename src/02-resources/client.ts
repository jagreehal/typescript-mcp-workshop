#!/usr/bin/env node

import { experimental_createMCPClient as createMCPClient } from 'ai';
import { StreamableHTTPClientTransport } from '@modelcontextprotocol/sdk/client/streamableHttp';
import { PORT, RESOURCE_URIS, RESOURCE_NAMES } from './constants';

/**
 * Resources Deep-Dive Example Client
 *
 * Demonstrates focused interaction with MCP resources without the distraction
 * of tools and prompts. Perfect for learning core resource concepts.
 */

async function runResourcesDeepDive() {
  console.log('üóÇÔ∏è  Starting MCP Resources Deep-Dive Demo...\n');

  try {
    // Connect to the resources deep-dive server
    // ---
    // NOTE: StreamableHTTPClientTransport enables efficient streaming of large or binary resources (e.g., images, logs, CSV) from the server to the client. This is crucial for scalable, real-world MCP applications where resources may be too large to load all at once or may be streamed in real time.
    // ---
    const mcpClient = await createMCPClient({
      transport: new StreamableHTTPClientTransport(
        new URL(`http://localhost:${PORT}/mcp`),
      ),
    });

    console.log('üì° Connected to resources deep-dive server');

    // Build the list of resources from RESOURCE_URIS and RESOURCE_NAMES
    const resources = Object.entries(RESOURCE_URIS).map(([key, uri]) => ({
      name: (RESOURCE_NAMES as Record<string, string>)[key] || uri,
      uri,
    }));

    console.log(
      `üóÇÔ∏è  Available resources: ${resources.length ? resources.map((r) => r.name || r.uri).join(', ') : 'none'}\n`,
    );

    // --- Explicitly fetch and display each resource ---
    if (resources.length) {
      console.log(
        'üîé Fetching each resource to demonstrate client-side access:',
      );
      for (const resource of resources) {
        const uri = resource.uri;
        try {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const result = await (mcpClient as any).fetchResource({ uri });
          // Print a short preview (first 120 chars or base64 length for images)
          let preview = '';
          if (typeof result?.text === 'string') {
            if (uri.startsWith('image://')) {
              preview = `[image/png, base64 length: ${result.text.length}]`;
            } else {
              preview =
                result.text.length > 120
                  ? result.text.slice(0, 120) + '...'
                  : result.text;
            }
          } else {
            preview = '[no text content]';
          }
          console.log(`   ‚Ä¢ ${resource.name || uri}: ${preview}`);
        } catch (error) {
          console.log(
            `   ‚Ä¢ ${resource.name || uri}: [Error fetching resource: ${error instanceof Error ? error.message : String(error)}]`,
          );
        }
      }
      console.log('');
    }

    // Demo 1: Understanding Resource Fundamentals
    console.log('üéØ Demo 1: Understanding Resource Fundamentals');
    console.log('='.repeat(50));

    console.log('üìö What Are MCP Resources?');
    console.log(
      '   Resources are READ-ONLY data sources that servers expose to clients.',
    );
    console.log('   Key characteristics:');
    console.log('   ‚Ä¢ Identified by unique URIs');
    console.log('   ‚Ä¢ Have specific MIME types for content handling');
    console.log('   ‚Ä¢ Can be static or dynamically generated');
    console.log(
      '   ‚Ä¢ Support various content formats (text, JSON, HTML, images, etc.)',
    );
    console.log('   ‚Ä¢ Enable data sharing without executable code\n');

    // Demo 2: Resource URI Schemes and Patterns
    console.log('üéØ Demo 2: Resource URI Schemes and Patterns');
    console.log('='.repeat(50));

    console.log('üîó URI Scheme Examples:');
    console.log('   This server demonstrates various URI patterns:');
    console.log('   ‚Ä¢ file:///logs/app.log - Traditional file system paths');
    console.log('   ‚Ä¢ system://status - System information and metrics');
    console.log('   ‚Ä¢ config://server.json - Configuration data');
    console.log('   ‚Ä¢ docs://resources-guide.md - Documentation resources');
    console.log('   ‚Ä¢ web://dashboard.html - Web content and dashboards');
    console.log('   ‚Ä¢ data://sample-metrics.csv - Data files and datasets');
    console.log('   ‚Ä¢ image://mcp-logo.png - Binary content like images');
    console.log('   ‚Ä¢ volatile://might-fail - Demonstrating error handling\n');

    console.log('   URI Design Best Practices:');
    console.log('   ‚Ä¢ Use meaningful schemes that indicate content type');
    console.log(
      '   ‚Ä¢ Make paths descriptive and hierarchical when appropriate',
    );
    console.log('   ‚Ä¢ Maintain consistency within your application');
    console.log('   ‚Ä¢ Consider versioning for evolving resources\n');

    // Demo 3: MIME Types and Content Handling
    console.log('üéØ Demo 3: MIME Types and Content Handling');
    console.log('='.repeat(50));

    console.log('üìã Supported MIME Types in This Server:');
    console.log(
      '   ‚Ä¢ text/plain - Simple text content (logs, plain text files)',
    );
    console.log(
      '   ‚Ä¢ application/json - Structured data (status, configuration)',
    );
    console.log('   ‚Ä¢ text/markdown - Documentation and formatted text');
    console.log('   ‚Ä¢ text/html - Web content and dashboards');
    console.log('   ‚Ä¢ text/csv - Tabular data and metrics');
    console.log('   ‚Ä¢ image/png - Binary image content\n');

    console.log('   MIME Type Importance:');
    console.log('   ‚Ä¢ Tells clients how to interpret resource content');
    console.log('   ‚Ä¢ Enables proper rendering and processing');
    console.log('   ‚Ä¢ Supports content negotiation patterns');
    console.log('   ‚Ä¢ Essential for binary data handling\n');

    // Demo 4: Static vs Dynamic Resources
    console.log('üéØ Demo 4: Static vs Dynamic Resources');
    console.log('='.repeat(50));

    console.log('üìä Resource Generation Patterns:');
    console.log('   Static Resources:');
    console.log('   ‚Ä¢ Documentation (docs://resources-guide.md)');
    console.log('   ‚Ä¢ Configuration templates');
    console.log('   ‚Ä¢ Image assets and media files');
    console.log('   ‚Ä¢ Content that rarely changes\n');

    console.log('   Dynamic Resources:');
    console.log('   ‚Ä¢ System status (system://status) - real-time metrics');
    console.log('   ‚Ä¢ Log files (file:///logs/app.log) - updated timestamps');
    console.log(
      '   ‚Ä¢ Data exports (data://sample-metrics.csv) - generated data',
    );
    console.log(
      '   ‚Ä¢ Dashboards (web://dashboard.html) - current information\n',
    );

    console.log('   Dynamic Generation Benefits:');
    console.log('   ‚Ä¢ Always current information');
    console.log('   ‚Ä¢ Reduced storage requirements');
    console.log('   ‚Ä¢ Customizable based on request context');
    console.log('   ‚Ä¢ Real-time data integration\n');

    // Demo 5: Error Handling and Reliability
    console.log('üéØ Demo 5: Error Handling and Reliability');
    console.log('='.repeat(50));

    console.log('‚ö†Ô∏è  Resource Error Scenarios:');
    console.log('   Resources can fail for various reasons:');
    console.log('   ‚Ä¢ Network connectivity issues');
    console.log('   ‚Ä¢ File system access problems');
    console.log('   ‚Ä¢ Temporary service unavailability');
    console.log('   ‚Ä¢ Permission or authentication failures');
    console.log('   ‚Ä¢ Resource generation errors\n');

    console.log('   Error Handling Best Practices:');
    console.log('   ‚Ä¢ Provide descriptive error messages');
    console.log('   ‚Ä¢ Implement retry logic for transient failures');
    console.log('   ‚Ä¢ Use appropriate HTTP status codes');
    console.log('   ‚Ä¢ Log errors for debugging and monitoring');
    console.log('   ‚Ä¢ Consider fallback resources when possible\n');

    // Demo 6: Real-World Resource Applications
    console.log('üéØ Demo 6: Real-World Resource Applications');
    console.log('='.repeat(50));

    console.log('üè≠ Production Use Cases:');
    console.log('   ‚Ä¢ API Documentation - Serve OpenAPI specs and guides');
    console.log(
      '   ‚Ä¢ Configuration Management - Expose settings and feature flags',
    );
    console.log('   ‚Ä¢ Monitoring Dashboards - Real-time system metrics');
    console.log('   ‚Ä¢ Data Exports - CSV, JSON data for analysis');
    console.log('   ‚Ä¢ Asset Serving - Images, documents, media files');
    console.log('   ‚Ä¢ Log Access - Application and system log files');
    console.log('   ‚Ä¢ Health Checks - System status and service health\n');

    console.log('   Enterprise Patterns:');
    console.log('   ‚Ä¢ Content versioning and cache control');
    console.log('   ‚Ä¢ Access control and authentication');
    console.log('   ‚Ä¢ Resource discovery and metadata');
    console.log('   ‚Ä¢ Performance monitoring and optimization');
    console.log('   ‚Ä¢ Cross-origin resource sharing (CORS)\n');

    // Demo 7: Resource vs Tools vs Prompts
    console.log('üéØ Demo 7: Resource vs Tools vs Prompts');
    console.log('='.repeat(50));

    console.log('üîç MCP Component Comparison:');
    console.log('   Resources (This Example):');
    console.log('   ‚Ä¢ READ-ONLY data sources');
    console.log('   ‚Ä¢ Static or dynamically generated content');
    console.log('   ‚Ä¢ Various MIME types and formats');
    console.log('   ‚Ä¢ URI-based identification');
    console.log('   ‚Ä¢ No side effects or state changes\n');

    console.log('   Tools (see 01a-tools-only):');
    console.log('   ‚Ä¢ EXECUTABLE functions with parameters');
    console.log('   ‚Ä¢ Can modify state or perform actions');
    console.log('   ‚Ä¢ Parameter validation and error handling');
    console.log('   ‚Ä¢ Support for streaming content delivery');
    console.log('   ‚Ä¢ Interactive and stateful operations\n');

    console.log('   Prompts (see 01c-prompts-mastery):');
    console.log('   ‚Ä¢ TEMPLATE generators for AI interactions');
    console.log('   ‚Ä¢ Parameterized prompt construction');
    console.log('   ‚Ä¢ Context-aware content generation');
    console.log('   ‚Ä¢ AI model integration patterns');
    console.log('   ‚Ä¢ Dynamic prompt customization\n');

    console.log('‚ú® Resources deep-dive demo overview completed!');
    console.log('\nüéì Key Resource Concepts Learned:');
    console.log('‚Ä¢ Resources are read-only data sources with unique URIs');
    console.log(
      '‚Ä¢ MIME types enable proper content handling and interpretation',
    );
    console.log(
      '‚Ä¢ Dynamic generation provides real-time and customized content',
    );
    console.log('‚Ä¢ Error handling is crucial for reliable resource access');
    console.log('‚Ä¢ URI schemes should be meaningful and consistent');
    console.log(
      '‚Ä¢ Resources complement tools and prompts in the MCP ecosystem',
    );

    console.log('\nüöÄ To interact with these resources:');
    console.log('1. Start the server: npm run example:01b:server');
    console.log('2. Access resources through MCP clients');
    console.log(
      '3. Study the server.ts code to understand implementation patterns',
    );

    console.log('\nüî¨ Next Steps in Learning Path:');
    console.log(
      '‚Ä¢ Move to 01c-prompts-mastery to learn prompt template patterns',
    );
    console.log(
      '‚Ä¢ Return to comprehensive examples (02-07) for combined concepts',
    );
    console.log('‚Ä¢ Build custom resource servers for your specific use cases');
  } catch (error) {
    console.error('‚ùå Demo connection failed:', error);
    console.log('\nüí° Make sure the resources deep-dive server is running:');
    console.log('   npm run example:01b:server');
    console.log(
      '\nüìö This demo showcases resource patterns even without live connection.',
    );
  }
}

// Resource Learning Exercises
function printResourceExercises() {
  console.log('\nüìã Recommended Resource Exercises:');

  console.log('\n1. **URI Design Practice**:');
  console.log('   ‚Ä¢ Design URIs for different content types in your domain');
  console.log('   ‚Ä¢ Practice hierarchical resource organization');
  console.log('   ‚Ä¢ Consider versioning strategies for evolving resources');

  console.log('\n2. **MIME Type Exploration**:');
  console.log('   ‚Ä¢ Experiment with different content formats');
  console.log('   ‚Ä¢ Understand how clients handle various MIME types');
  console.log('   ‚Ä¢ Practice binary data encoding and serving');

  console.log('\n3. **Dynamic Content Generation**:');
  console.log('   ‚Ä¢ Create resources that reflect current system state');
  console.log('   ‚Ä¢ Build data export resources with real-time information');
  console.log('   ‚Ä¢ Implement personalized or context-aware content');

  console.log('\n4. **Error Handling Scenarios**:');
  console.log('   ‚Ä¢ Test the volatile://might-fail resource multiple times');
  console.log('   ‚Ä¢ Implement retry logic for failed resource access');
  console.log(
    '   ‚Ä¢ Practice graceful degradation when resources are unavailable',
  );

  console.log('\n5. **Real-World Implementation**:');
  console.log('   ‚Ä¢ Create a documentation resource for your application');
  console.log('   ‚Ä¢ Build a configuration resource with your settings');
  console.log('   ‚Ä¢ Implement a status dashboard for your services');

  console.log('\nüîç Understanding Resource Metadata:');
  console.log('‚Ä¢ URI: Unique identifier for the resource');
  console.log('‚Ä¢ Name: Human-readable display name');
  console.log('‚Ä¢ MIME Type: Content format specification');
  console.log('‚Ä¢ Description: Purpose and content summary');
  console.log('‚Ä¢ Load Function: Dynamic content generation logic');
}

// Run the demo
await runResourcesDeepDive();
printResourceExercises();
