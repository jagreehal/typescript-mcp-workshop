#!/usr/bin/env node

import { experimental_createMCPClient as createMCPClient } from 'ai';
import { StreamableHTTPClientTransport } from '@modelcontextprotocol/sdk/client/streamableHttp';

// TypeScript interfaces for MCP prompts
interface MCPPrompt {
  name: string;
  description?: string;
  arguments?: unknown;
}

/**
 * Prompts Mastery Example Client
 *
 * Demonstrates focused interaction with MCP prompts without the distraction
 * of tools and resources. Perfect for learning core prompt template concepts.
 */

async function runPromptsMaxtery() {
  console.log('üìù Starting MCP Prompts Mastery Demo...\n');

  try {
    // Connect to the prompts mastery server
    const mcpClient = await createMCPClient({
      transport: new StreamableHTTPClientTransport(
        new URL('http://localhost:8089/stream'),
      ),
    });

    console.log('üì° Connected to prompts mastery server');

    // Get available prompts
    try {
      const prompts = await (
        mcpClient as unknown as {
          listPrompts(): Promise<{ prompts?: MCPPrompt[] }>;
        }
      ).listPrompts();
      console.log(
        `üìù Available prompts: ${Array.isArray(prompts?.prompts) ? prompts.prompts.map((p: MCPPrompt) => p.name).join(', ') : 'none'}\n`,
      );
    } catch (error) {
      console.log(
        `üìù Available prompts: Unable to list (${error instanceof Error ? error.message : 'Unknown error'})\n`,
      );
    }

    // Demo 1: Understanding Prompt Fundamentals
    console.log('üéØ Demo 1: Understanding Prompt Fundamentals');
    console.log('='.repeat(50));

    console.log('üìù What Are MCP Prompts?');
    console.log(
      '   Prompts are TEMPLATE generators that create customized AI instructions.',
    );
    console.log('   Key characteristics:');
    console.log('   ‚Ä¢ Accept arguments to customize output');
    console.log('   ‚Ä¢ Generate dynamic content based on parameters');
    console.log('   ‚Ä¢ Support conditional logic and complex constructions');
    console.log('   ‚Ä¢ Enable consistent AI interactions across applications');
    console.log('   ‚Ä¢ Provide reusable patterns for common scenarios\n');

    // Demo 2: Prompt Template Patterns
    console.log('üéØ Demo 2: Prompt Template Patterns');
    console.log('='.repeat(50));

    console.log('üîß Template Construction Approaches:');
    console.log('   This server demonstrates various template patterns:');
    console.log('   ‚Ä¢ Simple variable substitution (greeting prompt)');
    console.log('   ‚Ä¢ Conditional logic branches (code_review prompt)');
    console.log('   ‚Ä¢ Multi-role conversation setup (team_discussion prompt)');
    console.log('   ‚Ä¢ Educational level adaptation (explain_concept prompt)');
    console.log('   ‚Ä¢ Style and constraint handling (creative_writing prompt)');
    console.log('   ‚Ä¢ Methodology-driven construction (data_analysis prompt)');
    console.log('   ‚Ä¢ Framework-based approaches (problem_solving prompt)');
    console.log(
      '   ‚Ä¢ Context-aware continuation (conversation_context prompt)\n',
    );

    console.log('   Template Design Best Practices:');
    console.log('   ‚Ä¢ Use descriptive argument names and descriptions');
    console.log(
      '   ‚Ä¢ Implement proper conditional logic for optional parameters',
    );
    console.log('   ‚Ä¢ Provide clear, structured instructions');
    console.log('   ‚Ä¢ Include role context and specific objectives');
    console.log('   ‚Ä¢ Handle edge cases and missing arguments gracefully\n');

    // Demo 3: Argument Patterns and Validation
    console.log('üéØ Demo 3: Argument Patterns and Validation');
    console.log('='.repeat(50));

    console.log('üìã Argument Design Patterns:');
    console.log('   Required Arguments:');
    console.log('   ‚Ä¢ Core content (concept, problem, topic)');
    console.log('   ‚Ä¢ Context specification (language, subject, domain)');
    console.log('   ‚Ä¢ Primary directives (genre, analysis_type)\n');

    console.log('   Optional Arguments:');
    console.log('   ‚Ä¢ Style modifiers (experience_level, tone, style)');
    console.log(
      '   ‚Ä¢ Constraint parameters (focus_areas, constraints, methodology)',
    );
    console.log('   ‚Ä¢ Enhancement flags (examples, context, tools)\n');

    console.log('   Argument Processing Techniques:');
    console.log('   ‚Ä¢ String parsing and splitting (focus_areas ‚Üí array)');
    console.log('   ‚Ä¢ Conditional branching (experience_level ‚Üí instructions)');
    console.log('   ‚Ä¢ Default value handling (level || "college")');
    console.log('   ‚Ä¢ Type coercion (examples === "true")');
    console.log(
      '   ‚Ä¢ Lookup table mapping (roleDescriptions, levelGuidance)\n',
    );

    // Demo 4: Dynamic Content Generation
    console.log('üéØ Demo 4: Dynamic Content Generation');
    console.log('='.repeat(50));

    console.log('üé® Content Generation Strategies:');
    console.log('   Static Templates:');
    console.log('   ‚Ä¢ Fixed structure with variable insertion');
    console.log('   ‚Ä¢ Consistent formatting and organization');
    console.log('   ‚Ä¢ Reliable output patterns\n');

    console.log('   Dynamic Templates:');
    console.log('   ‚Ä¢ Conditional content inclusion based on parameters');
    console.log('   ‚Ä¢ Variable instruction sets (beginner vs advanced)');
    console.log('   ‚Ä¢ Adaptive role assignments (team_discussion)');
    console.log('   ‚Ä¢ Context-aware modifications (conversation_context)\n');

    console.log('   Generation Benefits:');
    console.log('   ‚Ä¢ Customized instructions for specific scenarios');
    console.log('   ‚Ä¢ Consistent quality across different contexts');
    console.log('   ‚Ä¢ Reusable patterns for common use cases');
    console.log('   ‚Ä¢ Scalable prompt management and maintenance\n');

    // Demo 5: Conditional Logic and Branching
    console.log('üéØ Demo 5: Conditional Logic and Branching');
    console.log('='.repeat(50));

    console.log('üîÄ Conditional Patterns:');
    console.log('   Simple Conditionals:');
    console.log('   ‚Ä¢ Presence checks (if focus_areas exists)');
    console.log('   ‚Ä¢ Value-based branching (experience_level === "beginner")');
    console.log('   ‚Ä¢ Default fallbacks (level || "college")\n');

    console.log('   Complex Logic:');
    console.log('   ‚Ä¢ Multi-condition evaluations');
    console.log('   ‚Ä¢ Nested conditional structures');
    console.log('   ‚Ä¢ Lookup table implementations');
    console.log('   ‚Ä¢ Switch-like constructions\n');

    console.log('   Best Practices:');
    console.log('   ‚Ä¢ Always provide default values for optional parameters');
    console.log('   ‚Ä¢ Use meaningful conditional expressions');
    console.log('   ‚Ä¢ Handle edge cases and unexpected values');
    console.log('   ‚Ä¢ Maintain readability with clear logic flow\n');

    // Demo 6: Role-Based and Multi-Perspective Prompts
    console.log('üéØ Demo 6: Role-Based and Multi-Perspective Prompts');
    console.log('='.repeat(50));

    console.log('üé≠ Role Pattern Applications:');
    console.log('   Single Role Prompts:');
    console.log('   ‚Ä¢ Expert positioning (code reviewer, data analyst)');
    console.log('   ‚Ä¢ Skill specialization (creative writer, educator)');
    console.log('   ‚Ä¢ Authority establishment (problem solver)\n');

    console.log('   Multi-Role Prompts:');
    console.log('   ‚Ä¢ Team simulation (developer, designer, PM, QA)');
    console.log(
      '   ‚Ä¢ Perspective diversity (different viewpoints on same topic)',
    );
    console.log('   ‚Ä¢ Collaborative problem-solving approaches\n');

    console.log('   Role Implementation Strategies:');
    console.log('   ‚Ä¢ Role description mapping (roleDescriptions object)');
    console.log('   ‚Ä¢ Dynamic role assignment based on input');
    console.log('   ‚Ä¢ Role-specific instruction customization');
    console.log('   ‚Ä¢ Interaction orchestration between roles\n');

    // Demo 7: Educational and Adaptive Prompts
    console.log('üéØ Demo 7: Educational and Adaptive Prompts');
    console.log('='.repeat(50));

    console.log('üéì Adaptive Prompt Patterns:');
    console.log('   Level-Based Adaptation:');
    console.log(
      '   ‚Ä¢ Language complexity adjustment (elementary ‚Üí professional)',
    );
    console.log(
      '   ‚Ä¢ Content depth modification (basic concepts ‚Üí implementation)',
    );
    console.log('   ‚Ä¢ Example inclusion based on learning needs\n');

    console.log('   Context-Aware Adaptation:');
    console.log('   ‚Ä¢ Domain-specific terminology and approaches');
    console.log('   ‚Ä¢ Tool and methodology preferences');
    console.log('   ‚Ä¢ Business context integration\n');

    console.log('   Adaptive Benefits:');
    console.log('   ‚Ä¢ Personalized AI interactions');
    console.log('   ‚Ä¢ Appropriate complexity for audience');
    console.log('   ‚Ä¢ Improved learning outcomes');
    console.log('   ‚Ä¢ Scalable educational content\n');

    // Demo 8: Prompt vs Tools vs Resources
    console.log('üéØ Demo 8: Prompt vs Tools vs Resources');
    console.log('='.repeat(50));

    console.log('üîç MCP Component Comparison:');
    console.log('   Prompts (This Example):');
    console.log('   ‚Ä¢ TEMPLATE generators for AI instructions');
    console.log('   ‚Ä¢ Parameterized content creation');
    console.log('   ‚Ä¢ Dynamic instruction customization');
    console.log('   ‚Ä¢ Context-aware prompt construction');
    console.log(
      '   ‚Ä¢ Generate instructions for AI models that then execute and interact with data; they do not directly execute or serve data themselves.\n',
    );

    console.log('   Tools (see 01a-tools-only):');
    console.log('   ‚Ä¢ EXECUTABLE functions with parameters');
    console.log('   ‚Ä¢ Action-oriented operations');
    console.log('   ‚Ä¢ State modification capabilities');
    console.log('   ‚Ä¢ Return computed results or content');
    console.log('   ‚Ä¢ Interactive and stateful operations\n');

    console.log('   Resources (see 01b-resources-deep-dive):');
    console.log('   ‚Ä¢ READ-ONLY data sources');
    console.log('   ‚Ä¢ Static or dynamic content serving');
    console.log('   ‚Ä¢ URI-based resource identification');
    console.log('   ‚Ä¢ MIME type specification');
    console.log('   ‚Ä¢ No parameters or customization\n');

    console.log('‚ú® Prompts mastery demo overview completed!');
    console.log('\nüéì Key Prompt Concepts Learned:');
    console.log(
      '‚Ä¢ Prompts are template generators that create customized AI instructions',
    );
    console.log('‚Ä¢ Arguments enable dynamic content and conditional logic');
    console.log(
      '‚Ä¢ Role-based prompts provide specialized and multi-perspective interactions',
    );
    console.log(
      '‚Ä¢ Adaptive prompts adjust complexity and style based on context',
    );
    console.log(
      '‚Ä¢ Template patterns enable reusable and scalable AI interactions',
    );
    console.log(
      '‚Ä¢ Prompts complement tools and resources in the MCP ecosystem',
    );

    console.log('\nüöÄ To interact with these prompts:');
    console.log('1. Start the server: npm run example:01c:server');
    console.log('2. Use prompts through MCP clients or AI model integrations');
    console.log(
      '3. Study the server.ts code to understand template implementation patterns',
    );

    console.log('\nüî¨ Next Steps in Learning Path:');
    console.log(
      '‚Ä¢ Move to comprehensive examples (02-07) for combined MCP concepts',
    );
    console.log(
      '‚Ä¢ Integrate prompts with tools and resources for full applications',
    );
    console.log(
      '‚Ä¢ Build custom prompt libraries for your specific AI workflows',
    );
  } catch (error) {
    console.error('‚ùå Demo connection failed:', error);
    console.log('\nüí° Make sure the prompts mastery server is running:');
    console.log('   npm run example:01c:server');
    console.log(
      '\nüìö This demo showcases prompt patterns even without live connection.',
    );
  }
}

// Prompt Learning Exercises
function printPromptExercises() {
  console.log('\nüìã Recommended Prompt Exercises:');

  console.log('\n1. **Template Construction Practice**:');
  console.log('   ‚Ä¢ Design prompts for different AI interaction scenarios');
  console.log('   ‚Ä¢ Practice argument design and validation');
  console.log('   ‚Ä¢ Experiment with conditional logic patterns');

  console.log('\n2. **Role-Based Prompt Design**:');
  console.log('   ‚Ä¢ Create prompts for different expert roles');
  console.log('   ‚Ä¢ Design multi-perspective discussion templates');
  console.log('   ‚Ä¢ Practice role description and interaction patterns');

  console.log('\n3. **Adaptive Content Generation**:');
  console.log('   ‚Ä¢ Build prompts that adapt to user experience levels');
  console.log('   ‚Ä¢ Create domain-specific instruction variations');
  console.log('   ‚Ä¢ Implement context-aware content customization');

  console.log('\n4. **Conditional Logic Mastery**:');
  console.log('   ‚Ä¢ Practice complex conditional branching');
  console.log('   ‚Ä¢ Implement lookup table patterns');
  console.log('   ‚Ä¢ Handle edge cases and default value scenarios');

  console.log('\n5. **Real-World Prompt Libraries**:');
  console.log('   ‚Ä¢ Create prompt collections for your application domain');
  console.log('   ‚Ä¢ Build reusable template patterns');
  console.log('   ‚Ä¢ Implement consistent argument naming conventions');

  console.log('\nüîç Understanding Prompt Components:');
  console.log('‚Ä¢ Name: Unique identifier for the prompt template');
  console.log('‚Ä¢ Description: Purpose and usage explanation');
  console.log('‚Ä¢ Arguments: Input parameters with types and requirements');
  console.log(
    '‚Ä¢ Load Function: Template generation logic and content creation',
  );
  console.log('‚Ä¢ Conditional Logic: Dynamic content based on parameter values');
}

// Run the demo
runPromptsMaxtery().then(() => {
  printPromptExercises();
});
